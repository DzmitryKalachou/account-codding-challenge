buildscript {
    ext {
        kotlinVersion = '1.3.31'
        springBootVersion = '2.1.3.RELEASE'
        jooqVersion = '3.11.10'
    }
    repositories {
        jcenter()
    }
    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath('org.postgresql:postgresql:42.2.4')
    }
}

plugins {
    id "nu.studer.jooq" version "3.0.3"
    id "org.flywaydb.flyway" version "6.4.1"
    id "org.springframework.boot" version "2.1.3.RELEASE"
    id "org.jetbrains.kotlin.plugin.spring" version "1.3.21"
}

apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'idea'

group = 'com.example'
version = '0.0.1-SNAPSHOT'

sourceCompatibility = '1.8'

repositories {
    jcenter()
}

ext {
    datasource_url = project.hasProperty('datasource_url') ? project.getProperty('datasource_url') : "jdbc:postgresql://localhost:5432/account?characterEncoding=UTF-8"
    datasource_username = project.hasProperty('datasource_username') ? project.getProperty('datasource_username') : "app"
    datasource_password = project.hasProperty('datasource_password') ? project.getProperty('datasource_password') : "app"
}


mainClassName = 'com.example.account.AccountCodingChallengeApplicationKt'

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'

    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'

    implementation 'com.zaxxer:HikariCP'
    implementation "org.jooq:jooq:$jooqVersion"
    implementation 'org.postgresql:postgresql:42.2.4'

    jooqRuntime 'org.postgresql:postgresql:42.2.4'
    jooqRuntime "org.jooq:jooq-codegen:$jooqVersion"
    jooqRuntime "org.jooq:jooq-meta:$jooqVersion"
    jooqRuntime "org.jooq:jooq:$jooqVersion"

    implementation "org.iban4j:iban4j:3.2.1"


    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'

    testImplementation "org.jetbrains.kotlin:kotlin-test"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"


}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '1.8'
    }
}

sourceSets {
    generated {
        java {
            srcDirs = ['src/generated/java']
        }
        compileClasspath += sourceSets.main.runtimeClasspath
    }
    main {
        java {
            srcDirs += ['src/generated/java']
        }
    }
}


clean {
    delete sourceSets.generated.java.srcDirs
}

idea {
    module {
        sourceDirs += file('src/generated/java')
    }
}


flyway {
    url = "${datasource_url}"
    user = "${datasource_username}"
    password = "${datasource_password}"
    locations = ['filesystem:sql/migration']
    table = 'schema_version'
    baselineOnMigrate = true
    ignoreMissingMigrations = true
    outOfOrder = true
    cleanDisabled = true
}

flywayMigrate.dependsOn flywayRepair

jooq {
    version = "$jooqVersion"
    account(sourceSets.main) {
        jdbc {
            driver = "org.postgresql.Driver"
            url = "${datasource_url}"
            user = "${datasource_username}"
            password = "${datasource_password}"
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            strategy {
                name = 'org.jooq.codegen.DefaultGeneratorStrategy'
            }
            database {
                name = 'org.jooq.meta.postgres.PostgresDatabase'
                inputSchema = 'public'
                excludes = 'schema_version|pgp_armor_headers'
            }
            generate {
                relations = true
                deprecated = false
                records = true
                fluentSetters = true
                daos = false
                pojos = false
                immutablePojos = false
            }
            target {
                packageName = "com.example.db"
                directory = "src/generated/java"
            }
        }
    }
}